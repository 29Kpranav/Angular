Component with Emulated Encapsulation:
Let's create an example component with some HTML and styles.

HTML Template (example.component.html):
html
Copy code
<p>This is the example component</p>
<button class="example-button">Example Button</button>
Component Styles (example.component.css):
css
Copy code
p {
  color: blue;
}

.example-button {
  background-color: yellow;
  color: red;
}
Angular Component (example.component.ts):
typescript
Copy code
import { Component, ViewEncapsulation } from '@angular/core';

@Component({
  selector: 'app-example',
  templateUrl: './example.component.html',
  styleUrls: ['./example.component.css'],
  encapsulation: ViewEncapsulation.Emulated
})
export class ExampleComponent {
  // Component logic
}
In this example:

The HTML template contains a paragraph and a button, and the component styles define specific colors for the paragraph and the button.
When this component is used within the Angular application, the styles defined in example.component.css are scoped to this specific component. The colors specified for the <p> element and the .example-button class will only apply within this component.

So, even if you use the same class names or element types elsewhere in the application, the styles defined in this component won't affect those elements due to the default encapsulation mode (Emulated). This helps maintain isolation and prevents unintended style conflicts in the application.